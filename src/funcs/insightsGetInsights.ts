/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { QlooCore } from "../core.js";
import {
  encodeFormQuery,
  encodeJSONQuery,
  queryJoin,
} from "../lib/encodings.js";
import * as M from "../lib/matchers.js";
import { compactMap } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { RequestOptions } from "../lib/sdks.js";
import { extractSecurity, resolveGlobalSecurity } from "../lib/security.js";
import { pathToFunc } from "../lib/url.js";
import {
  ConnectionError,
  InvalidRequestError,
  RequestAbortedError,
  RequestTimeoutError,
  UnexpectedClientError,
} from "../models/errors/httpclienterrors.js";
import { QlooError } from "../models/errors/qlooerror.js";
import { ResponseValidationError } from "../models/errors/responsevalidationerror.js";
import { SDKValidationError } from "../models/errors/sdkvalidationerror.js";
import * as operations from "../models/operations/index.js";
import { APICall, APIPromise } from "../types/async.js";
import { Result } from "../types/fp.js";

/**
 * Insights API Deep Dive
 *
 * @remarks
 * Returns taste-based insights based on the input parameters you provide.
 */
export function insightsGetInsights(
  client: QlooCore,
  request: operations.GetInsightsRequest,
  options?: RequestOptions,
): APIPromise<
  Result<
    operations.GetInsightsResponse,
    | QlooError
    | ResponseValidationError
    | ConnectionError
    | RequestAbortedError
    | RequestTimeoutError
    | InvalidRequestError
    | UnexpectedClientError
    | SDKValidationError
  >
> {
  return new APIPromise($do(
    client,
    request,
    options,
  ));
}

async function $do(
  client: QlooCore,
  request: operations.GetInsightsRequest,
  options?: RequestOptions,
): Promise<
  [
    Result<
      operations.GetInsightsResponse,
      | QlooError
      | ResponseValidationError
      | ConnectionError
      | RequestAbortedError
      | RequestTimeoutError
      | InvalidRequestError
      | UnexpectedClientError
      | SDKValidationError
    >,
    APICall,
  ]
> {
  const parsed = safeParse(
    request,
    (value) => operations.GetInsightsRequest$outboundSchema.parse(value),
    "Input validation failed",
  );
  if (!parsed.ok) {
    return [parsed, { status: "invalid" }];
  }
  const payload = parsed.value;
  const body = null;

  const path = pathToFunc("/insights")();

  const query = queryJoin(
    encodeFormQuery({
      "filter.exclude.entities.query": payload["filter.exclude.entities.query"],
      "filter.parents.types": payload["filter.parents.types"],
      "filter.references_brand": payload["filter.references_brand"],
      "filter.release_country": payload["filter.release_country"],
      "filter.results.tags": payload["filter.results.tags"],
      "signal.demographics.audiences": payload["signal.demographics.audiences"],
      "signal.interests.entities": payload["signal.interests.entities"],
      "signal.interests.entities.query":
        payload["signal.interests.entities.query"],
    }, { explode: false }),
    encodeFormQuery({
      "bias.trends": payload["bias.trends"],
      "diversify.by": payload["diversify.by"],
      "diversify.take": payload["diversify.take"],
      "feature.explainability": payload["feature.explainability"],
      "filter.address": payload["filter.address"],
      "filter.content_rating": payload["filter.content_rating"],
      "filter.date_of_birth.max": payload["filter.date_of_birth.max"],
      "filter.date_of_birth.min": payload["filter.date_of_birth.min"],
      "filter.date_of_death.max": payload["filter.date_of_death.max"],
      "filter.date_of_death.min": payload["filter.date_of_death.min"],
      "filter.exclude.entities": payload["filter.exclude.entities"],
      "filter.exclude.location": payload["filter.exclude.location"],
      "filter.exclude.location.geohash":
        payload["filter.exclude.location.geohash"],
      "filter.exclude.location.query": payload["filter.exclude.location.query"],
      "filter.exclude.tags": payload["filter.exclude.tags"],
      "filter.exists": payload["filter.exists"],
      "filter.external.exists": payload["filter.external.exists"],
      "filter.external.resy.count.max":
        payload["filter.external.resy.count.max"],
      "filter.external.resy.count.min":
        payload["filter.external.resy.count.min"],
      "filter.external.resy.party_size.max":
        payload["filter.external.resy.party_size.max"],
      "filter.external.resy.party_size.min":
        payload["filter.external.resy.party_size.min"],
      "filter.external.resy.rating.max":
        payload["filter.external.resy.rating.max"],
      "filter.external.resy.rating.min":
        payload["filter.external.resy.rating.min"],
      "filter.external.tripadvisor.rating.count.max":
        payload["filter.external.tripadvisor.rating.count.max"],
      "filter.external.tripadvisor.rating.count.min":
        payload["filter.external.tripadvisor.rating.count.min"],
      "filter.external.tripadvisor.rating.max":
        payload["filter.external.tripadvisor.rating.max"],
      "filter.external.tripadvisor.rating.min":
        payload["filter.external.tripadvisor.rating.min"],
      "filter.finale_year.max": payload["filter.finale_year.max"],
      "filter.finale_year.min": payload["filter.finale_year.min"],
      "filter.gender": payload["filter.gender"],
      "filter.geocode.admin1_region": payload["filter.geocode.admin1_region"],
      "filter.geocode.admin2_region": payload["filter.geocode.admin2_region"],
      "filter.geocode.country_code": payload["filter.geocode.country_code"],
      "filter.geocode.name": payload["filter.geocode.name"],
      "filter.hotel_class.max": payload["filter.hotel_class.max"],
      "filter.hotel_class.min": payload["filter.hotel_class.min"],
      "filter.hours": payload["filter.hours"],
      "filter.location": payload["filter.location"],
      "filter.location.geohash": payload["filter.location.geohash"],
      "filter.location.query": payload["filter.location.query"],
      "filter.location.radius": payload["filter.location.radius"],
      "filter.popularity.max": payload["filter.popularity.max"],
      "filter.popularity.min": payload["filter.popularity.min"],
      "filter.price_level.max": payload["filter.price_level.max"],
      "filter.price_level.min": payload["filter.price_level.min"],
      "filter.price_range.from": payload["filter.price_range.from"],
      "filter.price_range.to": payload["filter.price_range.to"],
      "filter.properties.business_rating.max":
        payload["filter.properties.business_rating.max"],
      "filter.properties.business_rating.min":
        payload["filter.properties.business_rating.min"],
      "filter.publication_year.max": payload["filter.publication_year.max"],
      "filter.publication_year.min": payload["filter.publication_year.min"],
      "filter.rating.max": payload["filter.rating.max"],
      "filter.rating.min": payload["filter.rating.min"],
      "filter.release_date.max": payload["filter.release_date.max"],
      "filter.release_date.min": payload["filter.release_date.min"],
      "filter.release_year.max": payload["filter.release_year.max"],
      "filter.release_year.min": payload["filter.release_year.min"],
      "filter.results.entities": payload["filter.results.entities"],
      "filter.results.entities.query": payload["filter.results.entities.query"],
      "filter.tags": payload["filter.tags"],
      "filter.type": payload["filter.type"],
      "offset": payload.offset,
      "operator.exclude.tags": payload["operator.exclude.tags"],
      "operator.filter.external.exists":
        payload["operator.filter.external.exists"],
      "operator.filter.release_country":
        payload["operator.filter.release_country"],
      "operator.filter.tags": payload["operator.filter.tags"],
      "output.heatmap.boundary": payload["output.heatmap.boundary"],
      "page": payload.page,
      "signal.demographics.age": payload["signal.demographics.age"],
      "signal.demographics.age.weight":
        payload["signal.demographics.age.weight"],
      "signal.demographics.audiences.weight":
        payload["signal.demographics.audiences.weight"],
      "signal.demographics.gender": payload["signal.demographics.gender"],
      "signal.demographics.gender.weight":
        payload["signal.demographics.gender.weight"],
      "signal.interests.entities.weight":
        payload["signal.interests.entities.weight"],
      "signal.interests.tags": payload["signal.interests.tags"],
      "signal.interests.tags.weight": payload["signal.interests.tags.weight"],
      "signal.location": payload["signal.location"],
      "signal.location.query": payload["signal.location.query"],
      "signal.location.radius": payload["signal.location.radius"],
      "signal.location.weight": payload["signal.location.weight"],
      "sort_by": payload.sort_by,
      "take": payload.take,
    }),
    encodeJSONQuery({
      "filter.latest_known_year.max": payload["filter.latest_known_year.max"],
      "filter.latest_known_year.min": payload["filter.latest_known_year.min"],
      "filter.price.max": payload["filter.price.max"],
      "filter.price.min": payload["filter.price.min"],
    }, { explode: false }),
  );

  const headers = new Headers(compactMap({
    Accept: "application/json",
  }));

  const secConfig = await extractSecurity(client._options.apiKey);
  const securityInput = secConfig == null ? {} : { apiKey: secConfig };
  const requestSecurity = resolveGlobalSecurity(securityInput);

  const context = {
    options: client._options,
    baseURL: options?.serverURL ?? client._baseURL ?? "",
    operationID: "get-insights",
    oAuth2Scopes: [],

    resolvedSecurity: requestSecurity,

    securitySource: client._options.apiKey,
    retryConfig: options?.retries
      || client._options.retryConfig
      || { strategy: "none" },
    retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
  };

  const requestRes = client._createRequest(context, {
    security: requestSecurity,
    method: "GET",
    baseURL: options?.serverURL,
    path: path,
    headers: headers,
    query: query,
    body: body,
    userAgent: client._options.userAgent,
    timeoutMs: options?.timeoutMs || client._options.timeoutMs || -1,
  }, options);
  if (!requestRes.ok) {
    return [requestRes, { status: "invalid" }];
  }
  const req = requestRes.value;

  const doResult = await client._do(req, {
    context,
    errorCodes: ["400", "4XX", "500", "5XX"],
    retryConfig: context.retryConfig,
    retryCodes: context.retryCodes,
  });
  if (!doResult.ok) {
    return [doResult, { status: "request-error", request: req }];
  }
  const response = doResult.value;

  const [result] = await M.match<
    operations.GetInsightsResponse,
    | QlooError
    | ResponseValidationError
    | ConnectionError
    | RequestAbortedError
    | RequestTimeoutError
    | InvalidRequestError
    | UnexpectedClientError
    | SDKValidationError
  >(
    M.json(200, operations.GetInsightsResponse$inboundSchema),
    M.fail([400, "4XX"]),
    M.fail([500, "5XX"]),
  )(response, req);
  if (!result.ok) {
    return [result, { status: "complete", request: req, response }];
  }

  return [result, { status: "complete", request: req, response }];
}
