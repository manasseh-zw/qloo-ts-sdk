/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetTagTypesRequest = {
  /**
   * Filter by a comma-separated list of parental entity types (`urn:audience:communities`). Each type must match exactly.
   */
  filterParentsTypes?: Array<string> | undefined;
  /**
   * The page number of results to return. This is equivalent to take + offset and is the recommended approach for most use cases.
   */
  page?: number | undefined;
  /**
   * The number of results to return.
   */
  take?: number | undefined;
};

export type GetTagTypesResults = {
  entities?: Array<any> | undefined;
  duration?: number | undefined;
};

/**
 * Successful Operation
 */
export type GetTagTypesResponse = {
  success?: boolean | undefined;
  results?: GetTagTypesResults | undefined;
};

/** @internal */
export const GetTagTypesRequest$inboundSchema: z.ZodType<
  GetTagTypesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "filter.parents.types": z.array(z.string()).optional(),
  page: z.number().int().optional(),
  take: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    "filter.parents.types": "filterParentsTypes",
  });
});

/** @internal */
export type GetTagTypesRequest$Outbound = {
  "filter.parents.types"?: Array<string> | undefined;
  page?: number | undefined;
  take?: number | undefined;
};

/** @internal */
export const GetTagTypesRequest$outboundSchema: z.ZodType<
  GetTagTypesRequest$Outbound,
  z.ZodTypeDef,
  GetTagTypesRequest
> = z.object({
  filterParentsTypes: z.array(z.string()).optional(),
  page: z.number().int().optional(),
  take: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    filterParentsTypes: "filter.parents.types",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTagTypesRequest$ {
  /** @deprecated use `GetTagTypesRequest$inboundSchema` instead. */
  export const inboundSchema = GetTagTypesRequest$inboundSchema;
  /** @deprecated use `GetTagTypesRequest$outboundSchema` instead. */
  export const outboundSchema = GetTagTypesRequest$outboundSchema;
  /** @deprecated use `GetTagTypesRequest$Outbound` instead. */
  export type Outbound = GetTagTypesRequest$Outbound;
}

export function getTagTypesRequestToJSON(
  getTagTypesRequest: GetTagTypesRequest,
): string {
  return JSON.stringify(
    GetTagTypesRequest$outboundSchema.parse(getTagTypesRequest),
  );
}

export function getTagTypesRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetTagTypesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetTagTypesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetTagTypesRequest' from JSON`,
  );
}

/** @internal */
export const GetTagTypesResults$inboundSchema: z.ZodType<
  GetTagTypesResults,
  z.ZodTypeDef,
  unknown
> = z.object({
  entities: z.array(z.any()).optional(),
  duration: z.number().optional(),
});

/** @internal */
export type GetTagTypesResults$Outbound = {
  entities?: Array<any> | undefined;
  duration?: number | undefined;
};

/** @internal */
export const GetTagTypesResults$outboundSchema: z.ZodType<
  GetTagTypesResults$Outbound,
  z.ZodTypeDef,
  GetTagTypesResults
> = z.object({
  entities: z.array(z.any()).optional(),
  duration: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTagTypesResults$ {
  /** @deprecated use `GetTagTypesResults$inboundSchema` instead. */
  export const inboundSchema = GetTagTypesResults$inboundSchema;
  /** @deprecated use `GetTagTypesResults$outboundSchema` instead. */
  export const outboundSchema = GetTagTypesResults$outboundSchema;
  /** @deprecated use `GetTagTypesResults$Outbound` instead. */
  export type Outbound = GetTagTypesResults$Outbound;
}

export function getTagTypesResultsToJSON(
  getTagTypesResults: GetTagTypesResults,
): string {
  return JSON.stringify(
    GetTagTypesResults$outboundSchema.parse(getTagTypesResults),
  );
}

export function getTagTypesResultsFromJSON(
  jsonString: string,
): SafeParseResult<GetTagTypesResults, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetTagTypesResults$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetTagTypesResults' from JSON`,
  );
}

/** @internal */
export const GetTagTypesResponse$inboundSchema: z.ZodType<
  GetTagTypesResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  success: z.boolean().optional(),
  results: z.lazy(() => GetTagTypesResults$inboundSchema).optional(),
});

/** @internal */
export type GetTagTypesResponse$Outbound = {
  success?: boolean | undefined;
  results?: GetTagTypesResults$Outbound | undefined;
};

/** @internal */
export const GetTagTypesResponse$outboundSchema: z.ZodType<
  GetTagTypesResponse$Outbound,
  z.ZodTypeDef,
  GetTagTypesResponse
> = z.object({
  success: z.boolean().optional(),
  results: z.lazy(() => GetTagTypesResults$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTagTypesResponse$ {
  /** @deprecated use `GetTagTypesResponse$inboundSchema` instead. */
  export const inboundSchema = GetTagTypesResponse$inboundSchema;
  /** @deprecated use `GetTagTypesResponse$outboundSchema` instead. */
  export const outboundSchema = GetTagTypesResponse$outboundSchema;
  /** @deprecated use `GetTagTypesResponse$Outbound` instead. */
  export type Outbound = GetTagTypesResponse$Outbound;
}

export function getTagTypesResponseToJSON(
  getTagTypesResponse: GetTagTypesResponse,
): string {
  return JSON.stringify(
    GetTagTypesResponse$outboundSchema.parse(getTagTypesResponse),
  );
}

export function getTagTypesResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetTagTypesResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetTagTypesResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetTagTypesResponse' from JSON`,
  );
}
