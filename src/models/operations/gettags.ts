/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetTagsRequest = {
  /**
   * When set to true, allows tolerance for typos in the `filter.query parameter`. For example, a query for “Mediterranaen” would return tags with the word “Mediterranean” in their titles. Default is false.
   */
  featureTypoTolerance?: boolean | undefined;
  /**
   * Filter by a comma-separated list of tag IDs. Often used to assess the affinity of a tag towards input.
   */
  filterResultsTags?: Array<string> | undefined;
  /**
   * Filter by a comma-separated list of parental entity types (`urn:audience:communities`). Each type must match exactly.
   */
  filterParentsTypes?: Array<string> | undefined;
  /**
   * Filter by the minimum popularity percentile required for a Point of Interest (float, between 0 and 1; closer to 1 indicates higher popularity, e.g., 0.98 for the 98th percentile).
   */
  filterPopularityMin?: number | undefined;
  /**
   * Filter by the maximum popularity percentile a Point of Interest must have (float, between 0 and 1; closer to 1 indicates higher popularity, e.g., 0.98 for the 98th percentile).
   */
  filterPopularityMax?: number | undefined;
  /**
   * A partial string search on the audience or tag name.
   */
  filterQuery?: string | undefined;
  /**
   * Filter by a comma-separated list of tag types. Each tag type requires an exact match. You can retrieve a list of tag types supported by each entity type via the Tag Types API.
   */
  filterTagTypes?: Array<string> | undefined;
  /**
   * The page number of results to return. This is equivalent to take + offset and is the recommended approach for most use cases.
   */
  page?: number | undefined;
  /**
   * The number of results to return.
   */
  take?: number | undefined;
};

export type GetTagsResults = {
  tags?: Array<any> | undefined;
};

/**
 * Successful Operation
 */
export type GetTagsResponse = {
  duration?: number | undefined;
  success?: boolean | undefined;
  results?: GetTagsResults | undefined;
};

/** @internal */
export const GetTagsRequest$inboundSchema: z.ZodType<
  GetTagsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "feature.typo_tolerance": z.boolean().default(false),
  "filter.results.tags": z.array(z.string()).optional(),
  "filter.parents.types": z.array(z.string()).optional(),
  "filter.popularity.min": z.number().optional(),
  "filter.popularity.max": z.number().optional(),
  "filter.query": z.string().optional(),
  "filter.tag.types": z.array(z.string()).optional(),
  page: z.number().int().optional(),
  take: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    "feature.typo_tolerance": "featureTypoTolerance",
    "filter.results.tags": "filterResultsTags",
    "filter.parents.types": "filterParentsTypes",
    "filter.popularity.min": "filterPopularityMin",
    "filter.popularity.max": "filterPopularityMax",
    "filter.query": "filterQuery",
    "filter.tag.types": "filterTagTypes",
  });
});

/** @internal */
export type GetTagsRequest$Outbound = {
  "feature.typo_tolerance": boolean;
  "filter.results.tags"?: Array<string> | undefined;
  "filter.parents.types"?: Array<string> | undefined;
  "filter.popularity.min"?: number | undefined;
  "filter.popularity.max"?: number | undefined;
  "filter.query"?: string | undefined;
  "filter.tag.types"?: Array<string> | undefined;
  page?: number | undefined;
  take?: number | undefined;
};

/** @internal */
export const GetTagsRequest$outboundSchema: z.ZodType<
  GetTagsRequest$Outbound,
  z.ZodTypeDef,
  GetTagsRequest
> = z.object({
  featureTypoTolerance: z.boolean().default(false),
  filterResultsTags: z.array(z.string()).optional(),
  filterParentsTypes: z.array(z.string()).optional(),
  filterPopularityMin: z.number().optional(),
  filterPopularityMax: z.number().optional(),
  filterQuery: z.string().optional(),
  filterTagTypes: z.array(z.string()).optional(),
  page: z.number().int().optional(),
  take: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    featureTypoTolerance: "feature.typo_tolerance",
    filterResultsTags: "filter.results.tags",
    filterParentsTypes: "filter.parents.types",
    filterPopularityMin: "filter.popularity.min",
    filterPopularityMax: "filter.popularity.max",
    filterQuery: "filter.query",
    filterTagTypes: "filter.tag.types",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTagsRequest$ {
  /** @deprecated use `GetTagsRequest$inboundSchema` instead. */
  export const inboundSchema = GetTagsRequest$inboundSchema;
  /** @deprecated use `GetTagsRequest$outboundSchema` instead. */
  export const outboundSchema = GetTagsRequest$outboundSchema;
  /** @deprecated use `GetTagsRequest$Outbound` instead. */
  export type Outbound = GetTagsRequest$Outbound;
}

export function getTagsRequestToJSON(getTagsRequest: GetTagsRequest): string {
  return JSON.stringify(GetTagsRequest$outboundSchema.parse(getTagsRequest));
}

export function getTagsRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetTagsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetTagsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetTagsRequest' from JSON`,
  );
}

/** @internal */
export const GetTagsResults$inboundSchema: z.ZodType<
  GetTagsResults,
  z.ZodTypeDef,
  unknown
> = z.object({
  tags: z.array(z.any()).optional(),
});

/** @internal */
export type GetTagsResults$Outbound = {
  tags?: Array<any> | undefined;
};

/** @internal */
export const GetTagsResults$outboundSchema: z.ZodType<
  GetTagsResults$Outbound,
  z.ZodTypeDef,
  GetTagsResults
> = z.object({
  tags: z.array(z.any()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTagsResults$ {
  /** @deprecated use `GetTagsResults$inboundSchema` instead. */
  export const inboundSchema = GetTagsResults$inboundSchema;
  /** @deprecated use `GetTagsResults$outboundSchema` instead. */
  export const outboundSchema = GetTagsResults$outboundSchema;
  /** @deprecated use `GetTagsResults$Outbound` instead. */
  export type Outbound = GetTagsResults$Outbound;
}

export function getTagsResultsToJSON(getTagsResults: GetTagsResults): string {
  return JSON.stringify(GetTagsResults$outboundSchema.parse(getTagsResults));
}

export function getTagsResultsFromJSON(
  jsonString: string,
): SafeParseResult<GetTagsResults, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetTagsResults$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetTagsResults' from JSON`,
  );
}

/** @internal */
export const GetTagsResponse$inboundSchema: z.ZodType<
  GetTagsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  duration: z.number().optional(),
  success: z.boolean().optional(),
  results: z.lazy(() => GetTagsResults$inboundSchema).optional(),
});

/** @internal */
export type GetTagsResponse$Outbound = {
  duration?: number | undefined;
  success?: boolean | undefined;
  results?: GetTagsResults$Outbound | undefined;
};

/** @internal */
export const GetTagsResponse$outboundSchema: z.ZodType<
  GetTagsResponse$Outbound,
  z.ZodTypeDef,
  GetTagsResponse
> = z.object({
  duration: z.number().optional(),
  success: z.boolean().optional(),
  results: z.lazy(() => GetTagsResults$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTagsResponse$ {
  /** @deprecated use `GetTagsResponse$inboundSchema` instead. */
  export const inboundSchema = GetTagsResponse$inboundSchema;
  /** @deprecated use `GetTagsResponse$outboundSchema` instead. */
  export const outboundSchema = GetTagsResponse$outboundSchema;
  /** @deprecated use `GetTagsResponse$Outbound` instead. */
  export type Outbound = GetTagsResponse$Outbound;
}

export function getTagsResponseToJSON(
  getTagsResponse: GetTagsResponse,
): string {
  return JSON.stringify(GetTagsResponse$outboundSchema.parse(getTagsResponse));
}

export function getTagsResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetTagsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetTagsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetTagsResponse' from JSON`,
  );
}
